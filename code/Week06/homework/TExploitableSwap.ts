import * as L from "https://deno.land/x/lucid@0.9.8/mod.ts"
import { assert } from "https://deno.land/std@0.90.0/testing/asserts.ts";
import * as fc from 'https://cdn.skypack.dev/fast-check';

// the script that we are testing.
const swapValidator: L.SpendingValidator = {
  type: "PlutusV2",
  //SwapV1 had double spending vulnerability
  // script: "590aa0590a9d01000032323322323232323232323232323232323233223232323232323232323232323322323232232322232325335323232533532323335530131200135017501623500122333553016120013501a50192350012233350012330344800000488cc0d40080048cc0d000520000013300d00200133501d335501f01433501d335501f0143500422001501e501e33355300d12001223355301212001235001223355023002335530151200123500122335502600233350012330374800000488cc0e00080048cc0dc00520000013300d002001501d32323500122222222222233355301b1200122350022222350042233500225335333573466e3c05c00411010c4cd40cc0180204020802140ac028d400888008d400c8800840b44cd5ce2491f4865792120596f75206861766520746f2070617920746865206f776e6572210002c3333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4094098d5d0a80619a8128131aba1500b33502502735742a014666aa052eb940a0d5d0a804999aa814bae502835742a01066a04a0626ae85401cccd540a40c9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40f1d69aba15002303d357426ae8940088c98c80fccd5ce02001f81e89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81e3ad35742a004607a6ae84d5d1280111931901f99ab9c04003f03d135573ca00226ea8004d5d09aba2500223263203b33573807807607226aae7940044dd50009aba1500533502575c6ae854010ccd540a40b88004d5d0a801999aa814bae200135742a00460606ae84d5d1280111931901b99ab9c038037035135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860406ae84d5d1280211931901499ab9c02a0290273333573466e1cd55ce9baa0054800080a08c98c80a0cd5ce0148140131999ab9a3370e6aae7540192000233221233001003002375c6ae854018dd69aba135744a00c464c6404e66ae700a009c09440984c98c8098cd5ce2490350543500026135573ca00226ea80044d55cf280089baa001223355300712001235001223355018002333500123355300b1200123500122335501c00235500d0010012233355500800e00200123355300b1200123500122335501c00235500c001001333555003009002001111222333553004120015013335530071200123500122335501800235500900133355300412001223500222533533355300c12001323350122233350032200200200135001220011233001225335002102b1001028235001223300a002005006100313350170040035014001335530071200123500122323355019003300100532001355029225335001135500a003221350022253353300c002008112223300200a0041300600300232001355022221122253350011002221330050023335530071200100500400111212223003004112122230010043200135501f221122533500115011221335012300400233553006120010040013200135501e221122253350011350032200122133350052200230040023335530071200100500400122333573466e3c008004074071220100112330012253350021001101b01a1233500222333500322002002001350012200112212330010030021232230023758002640026aa032446666aae7c004940288cd4024c010d5d080118019aba2002015232323333573466e1cd55cea80124000466442466002006004601a6ae854008c014d5d09aba2500223263201533573802c02a02626aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea80124000466442466002006004602c6ae854008cd4040054d5d09aba2500223263201a33573803603403026aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900e19ab9c01d01c01a019018135573aa00226ea8004d5d0a80119a8063ae357426ae8940088c98c8058cd5ce00b80b00a09aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405888c8cccd55cf80112804119a80399aa80498031aab9d5002300535573ca00460086ae8800c04c4d5d08008891001091091198008020018891091980080180109119191999ab9a3370ea0029000119091180100198029aba135573ca00646666ae68cdc3a801240044244002464c6402066ae700440400380344d55cea80089baa001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402066ae7004404003803403002c4d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401866ae700340300284d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200a33573801601401026ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201333573802802602202001e01c01a01801626aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900619ab9c00d00c00a009135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c8024cd5ce00500480380309aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900519ab9c00b00a008007006135573aa00226ea80048c8cccd5cd19b8750014800880248cccd5cd19b8750024800080248c98c8018cd5ce00380300200189aab9d37540029309000a481035054310022333573466e1c00800401000c48800848800488cdc0001000889191800800911980198010010009",
  //SwapV2 fixed
  script: "590c60590c5d0100003232323232332232323232323232323322323233223232323232323232323232323232323322323232232322232325335323232533553353232333553013120013501a501923500122333553016120013501d501c23500122333500123301e4800000488cc07c0080048cc07800520000013300d0020013350203355022017335020335502201735004220015021502133355300d120012233553012120012350012233550260023355301512001235001223355029002333500123303b4800000488cc0f00080048cc0ec00520000013300d002001502032323500122222222222233355301b1200122350022222350042233500225335333573466e3c05c0041141104cd40d80180204020802140b8028d400888008d400c8800840b84cd5ce2491f4865792120596f75206861766520746f2070617920746865206f776e6572210002d15335333573466e1cc8cccd54c04848004c8cd406c88ccd405c00c004008d4050004cd4068888c00cc008004800488cdc0000a40040029000299a9a800911a8011111111111111999a8069281912819128191199aa98100900099a81411299a801108018800a81911a80091299aa99a999ab9a3371e6a004440046a0084400408007e2666ae68cdc39a801110009a8021100082001f881f89a81b0018a81a806909a800911a8009111199aa980a0900091299a9a801111a80091111a806111a803111919a802919a8021299a999ab9a3371e0040020880862a00620864086466a00840864a66a666ae68cdc78010008220218a80188218a99a80190a99a8011099a801119a801119a801119a8011198168010009023119a801102311981680100091102311119a8021023111299a999ab9a3370e00c0060920902a66a666ae68cdc38028010248240998180020008824082408208a99a800908208820899a8140010008800a8139a9a804110011111111111110060a8102400405c05a205c266ae7124123537761702031205554784f2066726f6d20636f6e7472616374207065722074696d65210002d102d3333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd40a00a4d5d0a80619a8140149aba1500b33502802a35742a014666aa058eb940acd5d0a804999aa8163ae502b35742a01066a05006c6ae85401cccd540b00ddd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd4105d69aba150023042357426ae8940088c98c8118cd5ce02382302209aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a820bad35742a00460846ae84d5d1280111931902319ab9c047046044135573ca00226ea8004d5d09aba2500223263204233573808608408026aae7940044dd50009aba1500533502875c6ae854010ccd540b00cc8004d5d0a801999aa8163ae200135742a004606a6ae84d5d1280111931901f19ab9c03f03e03c135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a008604a6ae84d5d1280211931901819ab9c03103002e3333573466e1cd55ce9baa0054800080bc8c98c80bccd5ce0180178169999ab9a3370e6aae7540192000233221233001003002375c6ae854018dd69aba135744a00c464c6405c66ae700bc0b80b040b44c98c80b4cd5ce249035054350002d135573ca00226ea80044d55cf280089baa00122335530071200123500122335501b002333500123355300b1200123500122335501f00235500d0010012233355500801000200123355300b1200123500122335501f00235500c00100133355500300b002001111222333553004120015016335530071200123500122335501b00235500900133355300412001223500222533533355300c12001323350152233350032200200200135001220011233001225335002102c1001029235001223300a0020050061003133501a004003501700133553007120012350012232335501c00330010053200135502d225335001135500a003221350022253353300c002008112223300200a00413006003002320013550262211222533500110022213300500233355300712001005004001112122230030041121222300100432001355023221122533500115014221335015300400233553006120010040013200135502222112225335001135006003221333500900530040023335530071200100500400112350012200112350012200222333573466e3c00800407006c88ccd5cd19b8700200101b01a4890011233001225335002100110190181233500222333500322002002001350012200112212330010030021232230023758002640026aa034446666aae7c004940288cd4024c010d5d080118019aba2002019232323333573466e1cd55cea80124000466442466002006004601e6ae854008c014d5d09aba2500223263201933573803403202e26aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea8012400046644246600200600460306ae854008cd404005cd5d09aba2500223263201e33573803e03c03826aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931901019ab9c02102001e01d01c135573aa00226ea8004d5d0a80119a8063ae357426ae8940088c98c8068cd5ce00d80d00c09aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405c88c8cccd55cf80112804119a80399aa80498031aab9d5002300535573ca00460086ae8800c05c4d5d08008891001091091198008020018891091980080180109119191999ab9a3370ea002900011a80398029aba135573ca00646666ae68cdc3a801240044a00e464c6402866ae700540500480444d55cea80089baa0011212230020031122001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402466ae7004c04804003c0380344d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401c66ae7003c0380304d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200c33573801a01801426ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201533573802c02a02602402202001e01c01a26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900719ab9c00f00e00c00b135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c802ccd5ce00600580480409aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900619ab9c00d00c00a009008135573aa00226ea80048c8cccd5cd19b8750014800880148cccd5cd19b8750024800080148c98c8020cd5ce00480400300289aab9d37540022440042440029309000a4810350543100223370000400222464600200244660066004004003",
};
const swapValidatorAddr: L.Address = await (await L.Lucid.new(undefined, "Custom")).utils.validatorToAddress(swapValidator);

// the typed datum that we are going to use.
const SwapContractDatum = L.Data.Object({
  beneficiary: L.Data.Bytes(),
  price: L.Data.Integer(),
});
type SwapContractDatum = L.Data.Static<typeof SwapContractDatum>;


// the function that sends 1 token to the script address.
async function sendToScript(
    lucid: L.Lucid,
    userPrivKey: L.PrivateKey,
    dtm: SwapContractDatum,
    token: L.Unit,
    amount : bigint
  ): Promise<L.TxHash> {
  lucid.selectWalletFromPrivateKey(userPrivKey);
  const tx = await lucid
    .newTx()
    .payToContract(swapValidatorAddr, { inline: L.Data.to<SwapContractDatum>(dtm,SwapContractDatum) }, { [token]: amount }) 
    .complete();
  const signedTx = await tx.sign().complete();
  const txHash = await signedTx.submit();
  return txHash
}

// the function that given the context of lucid and a negative redeemer, grabs funds from the script address.
async function swapToken(
    lucid: L.Lucid,
    emulator: L.Emulator,
    userPrivKey: L.PrivateKey,
    dtm: SwapContractDatum,
    sellerAddr: L.Address,
  ): Promise<L.TxHash> {
  lucid.selectWalletFromPrivateKey(userPrivKey);
  const utxoAtScript: L.UTxO[] = await lucid.utxosAt(swapValidatorAddr);
  const ourUTxO: L.UTxO[] = utxoAtScript.filter((utxo) => utxo.datum == L.Data.to<SwapContractDatum>(dtm,SwapContractDatum));
  
  if (ourUTxO && ourUTxO.length > 0) {
      const tx = await lucid
          .newTx()
          .collectFrom(ourUTxO, L.Data.void())
          .attachSpendingValidator(swapValidator)
          .payToAddress(sellerAddr, { lovelace: 10000000n })
          .validFrom(emulator.now())
          .complete();

      const signedTx = await tx.sign().complete();
      const txHash = await signedTx.submit();
      return txHash
  }
  else throw new Error("UTxO's Expected!")
}

async function runTest1() {
  // setup a new privateKey that we can use for testing.
  const user1: L.PrivateKey = L.generatePrivateKey();
  const address1: string = await (await L.Lucid.new(undefined, "Custom")).selectWalletFromPrivateKey(user1).wallet.address();

  const user2: L.PrivateKey = L.generatePrivateKey();
  const address2: string = await (await L.Lucid.new(undefined, "Custom")).selectWalletFromPrivateKey(user2).wallet.address();

  // Setup the emulator and give our testing wallet 10000 ada and some tokens. These funds get added to the genesis block.
  const myToken: L.Unit = "79dc2cb93b706af32fe1ef3b3fb014b98ef83be6b5c1a0c6e9aa8f83" + L.fromText("My Token");
  const emulator = new L.Emulator([{ address: address1, assets: { lovelace: 10000000000n, [myToken]: 100n } }, { address: address2, assets: { lovelace: 10000000000n}}]);
  const lucid = await L.Lucid.new(emulator);

  // User1 send 1 token to contract
  const pkh1: string = L.getAddressDetails(address1).paymentCredential?.hash || "";
  const dtm = { beneficiary: pkh1, price: 10000000n }
  await sendToScript(lucid,user1,dtm,myToken,1n);
  
  // wait 
  emulator.awaitSlot(20);
  
  // User2 swap token from contract
  await swapToken(lucid,emulator,user2,dtm,address1);

  emulator.awaitBlock(10);
  
  // console.log("USER2")
  // console.log(await emulator.getUtxos(address2));
  // console.log("USER1")
  // console.log(await emulator.getUtxos(address1));
}

//// OTHER SCENARIO: USER1 MINT TOKENS FOR HIMSELF THEN SEND TO CONTRACT, THEN USER2 SWAP
// Helper function for mint tokens
async function mintToken(
    lucid: L.Lucid,
    userPrivKey: L.PrivateKey,
    policy: L.MintingPolicy,
    pkh: string,
    token: L.Unit,
    amount : bigint
  ): Promise<L.TxHash> {
  lucid.selectWalletFromPrivateKey(userPrivKey);
  const tx = await lucid
    .newTx()
    .mintAssets({ [token]: amount }, L.Data.void())
    .attachMintingPolicy(policy)
    .addSignerKey(pkh)
    .complete();

  const signedTx = await tx.sign().complete();
  const txHash = await signedTx.submit();
  // console.log("tid: " + txHash);
  return txHash
}
async function runTest2() {
  // setup a new privateKey that we can use for testing.
  const user1: L.PrivateKey = L.generatePrivateKey();
  const address1: string = await (await L.Lucid.new(undefined, "Custom")).selectWalletFromPrivateKey(user1).wallet.address();

  const user2: L.PrivateKey = L.generatePrivateKey();
  const address2: string = await (await L.Lucid.new(undefined, "Custom")).selectWalletFromPrivateKey(user2).wallet.address();

  // Setup the emulator and give our testing wallet 10000 ada. These funds get added to the genesis block.
  const emulator = new L.Emulator([{ address: address1, assets: { lovelace: 10000000000n } }, { address: address2, assets: { lovelace: 10000000000n}}]);
  const lucid = await L.Lucid.new(emulator);
  
  // User1's PubkeyHash 
  const pkh1: string = L.getAddressDetails(address1).paymentCredential?.hash || "";

  // Using 'Signed' Minting Policy in Lecture 5
  const Params = L.Data.Tuple([L.Data.Bytes()]);
  type Params = L.Data.Static<typeof Params>;
  const signedPolicy: L.MintingPolicy = {
      type: "PlutusV2",
      script: L.applyParamsToScript<Params>(
          "59081a590817010000323232332232323232323232323233223233223232323232322223232533532323253353235001222222222222533533355301612001321233001225335002210031001002501f25335333573466e3c0440040b00ac4d408400454080010840b040a8d40048800840784cd5ce249116d697373696e67207369676e61747572650001d3333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4060064d5d0a80619a80c00c9aba1500b33501801a35742a014666aa038eb9406cd5d0a804999aa80e3ae501b35742a01066a03004a6ae85401cccd54070099d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40c1d69aba150023031357426ae8940088c98c80cccd5ce01b01a81889aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8183ad35742a00460626ae84d5d1280111931901999ab9c036035031135573ca00226ea8004d5d09aba2500223263202f33573806406205a26aae7940044dd50009aba1500533501875c6ae854010ccd540700888004d5d0a801999aa80e3ae200135742a00460486ae84d5d1280111931901599ab9c02e02d029135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860286ae84d5d1280211931900e99ab9c02001f01b3333573466e1cd55ce9baa0054800080788c98c8070cd5ce00f80f00d1bae005101c13263201a3357389201035054350001c135573ca00226ea8004c8004d5406088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80c111999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118071aba150023005357426ae8940088c98c8058cd5ce00c80c00a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180b9aba1500233500f016357426ae8940088c98c806ccd5ce00f00e80c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7008007c06c0680644d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201733573803403202a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355015223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900919ab9c01501401000f135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01301200e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00f00e00a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00680600409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00b00a80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae7003c0380280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801801600e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003403002001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801201000800626aae74dd5000a4c2440042440022400292010350543100112323001001223300330020020011",
          [pkh1],
          Params)
  };

  const policyId: L.PolicyId = lucid.utils.mintingPolicyToId(signedPolicy);
  // console.log("minting policy: " + policyId);

  const myToken: L.Unit = policyId + L.fromText("My Token 2");

  // User1 mint 100 token
  await mintToken (lucid,user1,signedPolicy,pkh1,myToken,100n);
  
  emulator.awaitSlot(20);

  // User1 send 1 token to contract
  const dtm = { beneficiary: pkh1, price: 10000000n }
  await sendToScript(lucid,user1,dtm,myToken,1n);
  
  emulator.awaitSlot(20);
  await sendToScript(lucid,user1,dtm,myToken,1n);

  // wait 
  emulator.awaitSlot(20);
  
  // User2 swap token from contract
  await swapToken(lucid,emulator,user2,dtm,address1);

  emulator.awaitBlock(10);
  
  // console.log("USER2")
  // console.log(await emulator.getUtxos(address2));
  // console.log("USER1")
  // console.log(await emulator.getUtxos(address1));
}

// await runTest1();
// await runTest2();


// UNIT TEST
function testSucceed(
  str: string, // the string to display of the test
) {
  Deno.test(str, async () => {await runTest1()});
};

async function testFails(
  str: string, // the string to display of the test
) {
  Deno.test(str,async () => {
    let errorThrown = false;
    try {
      await runTest2();
    } catch (error) {
      errorThrown = true;
    }
    assert(
      errorThrown,
      "Expected to throw an error, but it completed successfully"
    );
  });
};

testSucceed("UT: Normal Spending; succeeds");
testFails("UT: Double Spending; fails");
